// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.MIgrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("Bio")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Deactivated")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeactivatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DeactivatedById");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MediaItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MediaItems", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "DeleteAccount"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ReadAccountById"
                        },
                        new
                        {
                            Id = 3,
                            Name = "UpdateAccount"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MediaItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MediaItemId")
                        .IsUnique();

                    b.ToTable("Reactions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SuperAdministrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Registered"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Verified"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Toast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Deactivated")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeactivatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("QuoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("QuoteId");

                    b.ToTable("Toasts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Deactivated")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeactivatedById")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EmailVerifyCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("PhoneVerifyCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeactivatedById");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Persistence.RelationshipTables.ReToast", b =>
                {
                    b.Property<int>("ToastId")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.HasKey("ToastId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("ReToasts", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Persistence.RelationshipTables.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            RoleId = 3,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 3
                        });
                });

            modelBuilder.Entity("Infrastructure.Persistence.RelationshipTables.RoleUser", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("Infrastructure.Persistence.RelationshipTables.ToastMediaItem", b =>
                {
                    b.Property<int>("ToastId")
                        .HasColumnType("int");

                    b.Property<int>("MediaItemId")
                        .HasColumnType("int");

                    b.HasKey("ToastId", "MediaItemId");

                    b.HasIndex("MediaItemId");

                    b.ToTable("ToastMediaItem");
                });

            modelBuilder.Entity("Infrastructure.Persistence.RelationshipTables.ToastReaction", b =>
                {
                    b.Property<int>("ToastId")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("ReactionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Reacted")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ToastId", "AccountId", "ReactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ReactionId");

                    b.ToTable("ToastReaction");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.HasOne("Domain.Entities.User", "DeactivatedBy")
                        .WithMany()
                        .HasForeignKey("DeactivatedById");

                    b.HasOne("Domain.Entities.User", "Owner")
                        .WithOne("Account")
                        .HasForeignKey("Domain.Entities.Account", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeactivatedBy");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.Reaction", b =>
                {
                    b.HasOne("Domain.Entities.MediaItem", "MediaItem")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Reaction", "MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("Domain.Entities.Toast", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Author")
                        .WithMany("Toasts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "DeactivatedBy")
                        .WithMany()
                        .HasForeignKey("DeactivatedById");

                    b.HasOne("Domain.Entities.Toast", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteId");

                    b.Navigation("Author");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.User", "DeactivatedBy")
                        .WithMany()
                        .HasForeignKey("DeactivatedById");

                    b.Navigation("DeactivatedBy");
                });

            modelBuilder.Entity("Infrastructure.Persistence.RelationshipTables.ReToast", b =>
                {
                    b.HasOne("Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Toast", null)
                        .WithMany()
                        .HasForeignKey("ToastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Persistence.RelationshipTables.RolePermission", b =>
                {
                    b.HasOne("Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Persistence.RelationshipTables.RoleUser", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Persistence.RelationshipTables.ToastMediaItem", b =>
                {
                    b.HasOne("Domain.Entities.MediaItem", null)
                        .WithMany()
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Toast", null)
                        .WithMany()
                        .HasForeignKey("ToastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Persistence.RelationshipTables.ToastReaction", b =>
                {
                    b.HasOne("Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Reaction", null)
                        .WithMany()
                        .HasForeignKey("ReactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Toast", null)
                        .WithMany()
                        .HasForeignKey("ToastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Navigation("Toasts");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
