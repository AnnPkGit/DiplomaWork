using System.Text;
using Application.Common.Interfaces;
using Infrastructure.Configurations;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using Newtonsoft.Json;

namespace Infrastructure.Services
{
    public class SmsVerify : ISmsVerify
    {
        
        private readonly string _baseUrl;
        private readonly string _authToken;
     
        
        private readonly IFourDigitCodeGenerator _codeGenerator; 
        private readonly ICurrentUserService _currentUserService;
        private readonly ApplicationDbContext _dbContext; 
 

        public SmsVerify(IFourDigitCodeGenerator codeGenerator, ICurrentUserService currentUserService, ApplicationDbContext dbContext,  IOptions<SmsVerifyOptions> options
        )
        {
            _codeGenerator = codeGenerator;
            _currentUserService = currentUserService;
            _dbContext = dbContext;
            _baseUrl = options.Value.BaseUrl;
            _authToken = options.Value.AuthToken;
        }
        
      
       
        public async Task SendSms()
        {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ id —Ç–µ–∫—É—â–µ–≥–æ —é–∑–µ—Ä–∞
            var currentUserId = _currentUserService.Id;

            // –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ id —é–∑–µ—Ä–∞
            var user = await _dbContext.Users
                .FirstOrDefaultAsync(user => user.Id == currentUserId);

            if (user == null)
            {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ —ñ—Å–Ω—É—î
                return;
            }

            var userPhoneNumber = user.Phone;

            
            string generatedCode = _codeGenerator.GenerateCode();
            string message = "–í–∞—à –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è \nToaster üçû :\nüìü " + generatedCode + " \n \n–ù—ñ–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Ü–µ–π –∫–æ–¥ ü§´";
            string sender = "IT Alarm"; 
            string[] recipients = new string[] { userPhoneNumber };
            
            try
            {
                using var client = new HttpClient();
                client.BaseAddress = new Uri(_baseUrl);

                // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ JSON
                var requestContent = new
                {
                    recipients,
                    sms = new
                    {
                        sender,
                        text = message
                    }
                };
                
                var jsonRequest = JsonConvert.SerializeObject(requestContent);
                var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                client.DefaultRequestHeaders.Add("Authorization", "Bearer " + _authToken);

                // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
                var response = await client.PostAsync("message/send.json", content);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("SMS –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. " + response);
                    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    user.PhoneVerifyCode = int.Parse(generatedCode);
                    await _dbContext.SaveChangesAsync();
                }
                else
                {
                    Console.WriteLine("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ SMS: " + response.ReasonPhrase);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("–°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞: " + ex.Message);
            }
        }
    }
}